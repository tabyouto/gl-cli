#!/usr/bin/env node

var download = require('download-git-repo')
var program = require('commander')
var exists = require('fs').existsSync
var path = require('path')
var ora = require('ora')
var home = require('user-home')
var tildify = require('tildify')
var chalk = require('chalk')
var inquirer = require('inquirer')
var rm = require('rimraf').sync
var logger = require('../lib/logger')
var generate = require('../lib/generate')
// var checkVersion = require('../lib/check-version')
// var warnings = require('../lib/warnings')
// var localPath = require('../lib/local-path')

// var isLocalPath = localPath.isLocalPath
// var getTemplatePath = localPath.getTemplatePath

/**
 * Usage.
 */

program
  .usage('<template-name> [project-name]')
  .option('-c, --clone', 'use git clone')
  .option('--offline', 'use cached template')

/**
 * Help.
 */

program.on('--help', function () {
  console.log('  Examples:')
  console.log()
  console.log(chalk.gray('    # create a new project with an official template'))
  console.log('    $ vue init webpack my-project')
  console.log()
  console.log(chalk.gray('    # create a new project straight from a github template'))
  console.log('    $ vue init username/repo my-project')
  console.log()
})

/**
 * Help.
 */

function help () {
  program.parse(process.argv)
  if (program.args.length < 1) return program.help()
}
help()

/**
 * Settings.
 */

var template = program.args[0] //获取第一个参数 默认为模板类型
var hasSlash = template.indexOf('/') > -1 //判断是否为一个路径
var rawName = program.args[1] //项目名称
var inPlace = !rawName || rawName === '.' //没有项目名称、或者为【.】则为true
var name = inPlace ? path.relative('../', process.cwd()) : rawName //没有项目名称则取当前目录名
var to = path.resolve(rawName || '.') //生成项目的目标路径
var clone = program.clone || false

var tmp = path.join(home, '.gl-templates', template.replace(/\//g, '-'))
if (program.offline) {
  console.log(`> Use cached template at ${chalk.yellow(tildify(tmp))}`)
  template = tmp
}
console.log('项目名称',rawName)
console.log(inPlace)
console.log(name)
console.log(to)

/**
 * Padding.
 */

console.log()
process.on('exit', function () {
  console.log()
})

if (exists(to)) { //判断路径是否合法
  inquirer.prompt([{
    type: 'confirm',
    message: inPlace
      ? 'Generate project in current directory?'
      : 'Target directory exists. Continue?',
    name: 'ok'
  }], function (answers) {
    if (answers.ok) {
      run()
    }else {
      console.log('finish')
    }
  })
} else {
  run()
}

/**
 * Check, download and generate the project.
 */

function run () {
  // // check if template is local
  // if (isLocalPath(template)) {
  //   var templatePath = getTemplatePath(template)
  //   if (exists(templatePath)) {
  //     generate(name, templatePath, to, function (err) {
  //       if (err) logger.fatal(err)
  //       console.log()
  //       logger.success('Generated "%s".', name)
  //     })
  //   } else {
  //     logger.fatal('Local template "%s" not found.', template)
  //   }
  // } else {
  //   checkVersion(function () {
      if (!hasSlash) {
        // use official templates
        var officialTemplate = 'tabyouto/' + template
        // if (template.indexOf('#') !== -1) {
  //         downloadAndGenerate(officialTemplate)
  //       } else {
  //         if (template.indexOf('-2.0') !== -1) {
  //           warnings.v2SuffixTemplatesDeprecated(template, inPlace ? '' : name)
  //           return
  //         }
  //
  //         warnings.v2BranchIsNowDefault(template, inPlace ? '' : name)
  //         downloadAndGenerate(officialTemplate)
  //       }
  //     } else {
  //       downloadAndGenerate(template)
  //     }
  //   })
  }
  downloadAndGenerate(officialTemplate)
}

/**
 * Download a generate from a template repo.
 *
 * @param {String} template
 */

function downloadAndGenerate (template) {
  var spinner = ora('downloading template')
  spinner.start()
  // Remove if local template exists
  if (exists(tmp)) rm(tmp)
  console.log(template)
  download(template, tmp, { clone: clone }, function (err) {
    spinner.stop()
    if (err) logger.fatal('Failed to download repo ' + template + ': ' + err.message.trim())
    console.log(name);
    console.log(tmp);
    console.log(to);
    generate(name, tmp, to, function (err) {
      if (err) logger.fatal(err)
      console.log()
      logger.success('Generated "%s".', name)
    })
  })
}
